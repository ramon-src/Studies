  To test the security of web app
  use
  $ npm install -g nsp
  $ nsp check
  Or install --save-dev only for projects


#### Development WEBSERVERS ####
  http-server
  live-server
  Express
  budo
  Webpack dev server
  BrowserSync

#### END Development WEBSERVERS ####


#### LOCALSHARES ####
To share a localhost in web with a link we can use this:
localtunnel, now, surge, ngrok

Ngrok has a good security :)

Localtunnel, we need only install using:
  $ npm install -g localtunnel
  And, run
  $ lt --port 3000
  Copy the URL and share!
  We can get a URL with a subdomain
  $ lt --port 3000 --subdomain mysubdomain

A good tip is combine the BrowserSync with Localtunnel ;)

#### END LOCALSHARES ####

#### AUTOMATIONS ####
  grunt
  gulp
  npm scripts

  npm scripts:
    No need for separate plugins
    Use tools directly
    Simpler debugging
    Better docs
    Easy to learn
    Simple

    bit.ly/npmvsgulp
    EVERYTHING IS NPM :P

    With NPM scripts we can use in package json
    "scripts": {

    }
    the annotation scripts and put all scripts
    like prestart, start, security and share :)

    Having the annotation --parallel we can run using
    the npm start if he has --parallel or running others scripts
    using
      $ npm run script-name

#### END AUTOMATIONS ####

#### TRANSPILERS ####
  Babel
  TypeScript
  Elm

  Are good for use the modern JavaScript features
  which that features are tranpiled to ES5 or fewer

  Babel:
    Modern, standards-based JS, today.
    Write standardized JS
    Leverage full JS Ecosystem
    Use experimental features earlier
    No type defs, annotations required
    ES6 imports are statically analyzable
    Test, Lint, Babel, Great Libs, IDE = safety

  TypeScript:
    Superset of JavaScript
    Enhanced autocompletion
    Enhanced readability
    Safer refactoring
    Clearer intent
    Additional non-standard features
    ESLint and react doesnt work right

  Elm
    Compiles down to JS
    Clean Syntax
    Immutable data structures
    Friendly errors
    All errors are compile-time errors
    Interops with JS

#### END TRANSPILERS ####


#### BUNDLERS ####
  ES6 Modules
    Standardized
    Statcially analyzable
      improved autocomplete
      intelligent refactoring
      fails fast
      tree shaking
    Easy to read
      named imports
      default exports

  Bundlers:
    Require js
    Browserify
    Webpack: bundle more than bundle of js, bundle imgs and css...
    Rollup
    JSPM

    Why WEBPACK?
      Much more than just JS
        css, images, fonts, html
      Bundle splitting
      Hot module reloading


#### END BUNDLERS ####

#### SOURCEMAPS ####

Source Maps has a propose to create a map into our
source code when it is bundling. After bundling we
can debug our application bundled :)

#### END SOURCEMAPS ####
